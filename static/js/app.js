/* =================================================================
   app.js - WERSJA OSTATECZNA
   ================================================================= */

// 1. Zmienna globalna, kt√≥ra bƒôdzie przechowywaƒá naszƒÖ mapƒô
let map;
let activeLayers = new Set();

// 2. Definicje warstw pogodowych
const weatherLayers = [
    { id: 'temperature', name: 'üå°Ô∏è Temperatura (MTS)', icon: 'üå°Ô∏è' },
    { id: 'wind', name: 'üí® Wiatr (MTS)', icon: 'üí®' },
    { id: 'wind-vectors', name: '‚û°Ô∏è Wektory wiatru', icon: '‚û°Ô∏è' },
    { id: 'precipitation', name: 'üåßÔ∏è Opady', icon: 'üåßÔ∏è' },
    { id: 'radar', name: 'üì° Radar pogodowy', icon: 'üì°' },
    { id: 'rain-animation', name: 'üåßÔ∏è Animowany deszcz', icon: 'üåßÔ∏è' },
    { id: 'snow-animation', name: '‚ùÑÔ∏è Animowany ≈õnieg', icon: '‚ùÑÔ∏è' },
    { id: 'clouds', name: '‚òÅÔ∏è Zachmurzenie', icon: '‚òÅÔ∏è' },
    { id: 'satellite', name: 'üõ∞Ô∏è Satelita', icon: 'üõ∞Ô∏è' },
    { id: 'pressure', name: 'üìä Ci≈õnienie', icon: 'üìä' },
    { id: 'humidity', name: 'üíß Wilgotno≈õƒá', icon: 'üíß' },
    { id: 'visibility', name: 'üëÅÔ∏è Widoczno≈õƒá', icon: 'üëÅÔ∏è' },
    { id: 'temperature-mts', name: 'üå°Ô∏è Temperatura MTS (raster-array)', icon: 'üå°Ô∏è' },
    { id: 'wind-mts', name: 'üí® Wiatr MTS (raster-array)', icon: 'üí®' },
    { id: 'temperature-animation', name: 'üå°Ô∏è Animacja temperatury', icon: 'üå°Ô∏è' },
    { id: 'wind-animation', name: 'üí® Animacja wiatru', icon: 'üí®' },
    { id: '3d-buildings', name: 'üè¢ Budynki 3D', icon: 'üè¢' },
    { id: '3d-terrain', name: 'üèîÔ∏è Teren 3D', icon: 'üèîÔ∏è' },
    { id: '3d-weather', name: 'üå§Ô∏è Pogoda 3D', icon: 'üå§Ô∏è' },
    { id: '3d-animations', name: 'üé¨ Animacje 3D', icon: 'üé¨' }
];

// 3. G≈Ç√≥wny punkt startowy aplikacji
document.addEventListener('DOMContentLoaded', initApp);

/**
 * G≈Ç√≥wna funkcja uruchamiajƒÖca ca≈ÇƒÖ aplikacjƒô.
 */
function initApp() {
    console.log('üöÄ Aplikacja startuje, wywo≈Çujƒô initializeMap...');
    initializeMap();
    createLayerControls();
}

/**
 * Tworzy kontrolki warstw dynamicznie
 */
function createLayerControls() {
    const weatherPanel = document.querySelector('.weather-panel .panel-content');
    if (!weatherPanel) return;

    // Znajd≈∫ sekcjƒô z podstawowymi warstwami
    const basicLayersSection = weatherPanel.querySelector('h4');
    if (!basicLayersSection) return;

    // Usu≈Ñ istniejƒÖce kontrolki
    const existingControls = weatherPanel.querySelectorAll('.layer-control');
    existingControls.forEach(control => control.remove());

    // Dodaj podstawowe warstwy
    const basicLayers = weatherLayers.slice(0, 12);
    basicLayers.forEach(layer => {
        const control = document.createElement('div');
        control.className = 'layer-control';
        control.setAttribute('data-layer', layer.id);
        control.textContent = layer.name;
        weatherPanel.appendChild(control);
    });

    // Dodaj zaawansowane warstwy MTS
    const mtsHeader = document.createElement('h4');
    mtsHeader.textContent = 'üî¨ Zaawansowane warstwy MTS:';
    weatherPanel.appendChild(mtsHeader);

    const mtsLayers = weatherLayers.slice(12, 16);
    mtsLayers.forEach(layer => {
        const control = document.createElement('div');
        control.className = 'layer-control';
        control.setAttribute('data-layer', layer.id);
        control.textContent = layer.name;
        weatherPanel.appendChild(control);
    });

    // Dodaj warstwy 3D
    const threeDHeader = document.createElement('h4');
    threeDHeader.textContent = 'üèóÔ∏è Warstwy 3D:';
    weatherPanel.appendChild(threeDHeader);

    const threeDLayers = weatherLayers.slice(16);
    threeDLayers.forEach(layer => {
        const control = document.createElement('div');
        control.className = 'layer-control';
        control.setAttribute('data-layer', layer.id);
        control.textContent = layer.name;
        weatherPanel.appendChild(control);
    });

    // Dodaj event listenery do nowych kontrolek
    initializeControls();
}

/**
 * Tworzy i w pe≈Çni konfiguruje mapƒô Mapbox, zapewniajƒÖc poprawnƒÖ kolejno≈õƒá operacji.
 */
async function initializeMap() {
    try {
        mapboxgl.accessToken = await loadMapboxToken();
        console.log('üîë Token za≈Çadowany.');

        // 3. TWORZENIE MAPY Z KLUCZOWYM PARAMETREM 'STYLE'
        //    Bez tego parametru, obiekt mapy jest niekompletny i bezu≈ºyteczny.
        map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [19.9, 50.0],
            zoom: 5
        });
        
        // 4. "Z≈ÅOTY STANDARD": CZEKANIE NA ZAKO≈ÉCZENIE ≈ÅADOWANIA
        //    Ca≈Çy kod, kt√≥ry ma modyfikowaƒá mapƒô, musi byƒá wykonany wewnƒÖtrz tego bloku.
        map.on('load', () => {
            console.log('‚úÖ Mapa w PE≈ÅNI za≈Çadowana. Gotowa do akcji!');
        });

    } catch (error) {
        console.error('‚ùå KRYTYCZNY B≈ÅƒÑD podczas tworzenia mapy:', error);
    }
}

/**
 * Dodaje listenery zdarze≈Ñ do wszystkich kontrolek warstw.
 */
function initializeControls() {
    const controls = document.querySelectorAll('.layer-control');
    console.log(`üéõÔ∏è Inicjalizujƒô ${controls.length} kontrolek...`);
    controls.forEach(control => {
        control.addEventListener('click', (e) => {
            // Pobieramy ID warstwy z atrybutu data-layer
            const layerId = e.currentTarget.dataset.layer;
            toggleLayer(layerId);
        });
    });
}

/**
 * Prze≈ÇƒÖcza widoczno≈õƒá warstwy: pokazuje jƒÖ, je≈õli jest ukryta, i ukrywa, je≈õli jest widoczna.
 * @param {string} layerId - ID warstwy, np. 'temperature'.
 */
function toggleLayer(layerId) {
    if (!map) {
        console.error('B≈ÇƒÖd w toggleLayer: Obiekt mapy nie istnieje!');
        return;
    }

    if (map.getLayer(layerId)) {
        map.removeLayer(layerId);
        if (map.getSource(layerId)) {
            map.removeSource(layerId);
        }
        activeLayers.delete(layerId);
        console.log(`‚ûñ Usuniƒôto warstwƒô ${layerId}`);
    } else {
        addWeatherLayer(layerId);
    }
}

/**
 * Dodaje warstwƒô pogodowƒÖ na mapƒô, pobierajƒÖc dane z Twojego backendu.
 * @param {string} layerId - ID warstwy do dodania.
 */
async function addWeatherLayer(layerId) {
    if (!map) {
        console.error('B≈ÇƒÖd w addWeatherLayer: Obiekt mapy nie istnieje!');
        return;
    }
    console.log(`‚ûï Dodajƒô warstwƒô dla ${layerId}...`);
    
    try {
        // Pobieramy dane z Twojego API w Pythonie
        const response = await fetch(`/api/weather/layers/${layerId}`);
        const geojsonData = await response.json();

        if (geojsonData.error) {
            throw new Error(geojsonData.error);
        }

        map.addSource(layerId, {
            type: 'geojson',
            data: geojsonData
        });

        // R√≥≈ºne typy warstw na podstawie layerId
        const layerConfig = getLayerConfig(layerId);
        map.addLayer(layerConfig);

        activeLayers.add(layerId);
        console.log(`‚úÖ Dodano warstwƒô ${layerId}`);
    } catch (error) {
        console.error(`Nie uda≈Ço siƒô dodaƒá warstwy ${layerId}:`, error);
    }
}

/**
 * Zwraca konfiguracjƒô warstwy na podstawie jej typu
 * @param {string} layerId - ID warstwy
 * @returns {Object} Konfiguracja warstwy Mapbox
 */
function getLayerConfig(layerId) {
    const baseConfig = {
        id: layerId,
        source: layerId
    };

    // R√≥≈ºne typy warstw na podstawie ID
    if (layerId.includes('temperature')) {
        return {
            ...baseConfig,
            type: 'heatmap',
            paint: {
                'heatmap-weight': [
                    'interpolate',
                    ['linear'],
                    ['get', 'temperature'],
                    0, 0,
                    30, 1
                ],
                'heatmap-intensity': 1,
                'heatmap-color': [
                    'interpolate',
                    ['linear'],
                    ['heatmap-density'],
                    0, 'rgba(0, 0, 255, 0)',
                    0.5, 'rgba(0, 255, 0, 0.5)',
                    1, 'rgba(255, 0, 0, 1)'
                ],
                'heatmap-radius': 30
            }
        };
    } else if (layerId.includes('wind')) {
        return {
            ...baseConfig,
            type: 'symbol',
            layout: {
                'icon-image': 'arrow',
                'icon-size': 0.5,
                'icon-rotate': ['get', 'wind_direction']
            },
            paint: {
                'icon-color': [
                    'interpolate',
                    ['linear'],
                    ['get', 'wind_speed'],
                    0, '#00ff00',
                    50, '#ff0000'
                ]
            }
        };
    } else {
        // Domy≈õlna konfiguracja dla innych warstw
        return {
            ...baseConfig,
            type: 'circle',
            paint: {
                'circle-radius': 10,
                'circle-color': '#FF5733',
                'circle-stroke-width': 1,
                'circle-stroke-color': '#FFFFFF'
            }
        };
    }
}

/**
 * ≈Åaduje token Mapbox z Twojego API.
 */
async function loadMapboxToken() {
    try {
        const response = await fetch('/api/config');
        const config = await response.json();
        return config.mapbox_access_token;
    } catch (error) {
        console.error("Nie uda≈Ço siƒô za≈Çadowaƒá konfiguracji z /api/config", error);
        return null;
    }
} 